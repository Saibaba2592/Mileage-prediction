# -*- coding: utf-8 -*-
"""Mileage_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/148AG53hnOAfRuPAv28SoqVpafpkMgHL6

# Mileage Prediction- Regression Analysis

**Source:**


The dataset was taken from the Stat.lib Library which is maintained at carnegie Mellon University. The dataset was used in the 1983 American Statistical Association Exposition.


**Data Set Information:**

This dataset is a slightly modified version of the dataset provided in the StatLib library. in line with the use by Ross Quinlan(1993) in predicting the attribute "mpg", 8 of the original instances were removed because thet had unknown values for the "mpg" attribute. The original dataset is available in the file "auto-mpg.data_original".

"The data concerns city-cycle fuel consumption in miles per gallon, to be predicted in terms of 3 multivated discrete and 5 continous attributes."(Quinlan, 1993)


**Attribute Information:**

1. mpg:continous
2. cylinders:multi-valued discrete
3. displacement:continous
4. horsepower:continous
5. weight:continous
6. acceleration:continous
7. model year:multi-valued discrete
8. origin:multi-valued discrete
9. car name:string(unique for each instance)

# Import Library
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""# Import Data"""

df=pd.read_csv("https://github.com/YBIFoundation/Dataset/raw/refs/heads/main/MPG.csv")

df.head()

df.nunique()

"""# Data Preprocessing"""

df.info()

df.describe()

df=df.dropna()

df.info()

"""# Data visualization

"""

sns.pairplot(df, x_vars=['displacement', 'horsepower', 'weight', 'acceleration', 'mpg'], y_vars=['mpg']);

sns.regplot(x='displacement', y='mpg', data=df);

df.columns

y=df['mpg']

y.shape

x=df[['displacement', 'horsepower', 'weight',
       'acceleration']]

x.shape

x

"""# Scaling Data"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

x=ss.fit_transform(x)

x

pd.DataFrame(x).describe()

"""**After Standardization mean is Zero and Standard Deviation os One**

# Train Test Split Data
"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.7,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""# Linear Regression Model"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(x_train,y_train)

lr.intercept_

lr.coef_

"""**Mileage=23.4-1.05Displacement-1.68Horsepower-4.10weight-0.115Acceleration+erroe**

# Predict Test Data
"""

y_pred=lr.predict(x_test)

y_pred

"""# Model Accuracy"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred)

mean_absolute_percentage_error(y_test, y_pred)

r2_score(y_test, y_pred)

"""# Polynomial Regression"""

from sklearn.preprocessing import PolynomialFeatures

poly= PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)

x_train2=poly.fit_transform(x_train)

x_test2=poly.fit_transform(x_test)

lr.fit(x_train2,y_train)

lr.intercept_

lr.coef_

y_pred_poly=lr.predict(x_test2)

"""# Model Accuracy"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred_poly)

mean_absolute_percentage_error(y_test, y_pred_poly)

r2_score(y_test, y_pred_poly)